{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\nimport rehypePrettyCode from 'rehype-pretty-code';\nimport rehypeSlug from 'rehype-slug';\nimport remarkGfm from 'remark-gfm';\n\nconst Project = defineDocumentType(() => ({\n  name: 'Project',\n  filePathPattern: `projects/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    id: { type: 'number', required: true },\n    title: { type: 'string', required: true },\n    description: { type: 'string' },\n    category: { type: 'string' },\n    publishedAt: { type: 'date', required: true },\n    techs: { type: 'string' },\n    banner: { type: 'string' },\n    link: { type: 'string' },\n    github: { type: 'string' },\n    duration: { type: 'number' },\n    featured: { type: 'boolean' },\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (doc) => `/${doc._raw.flattenedPath}`,\n    },\n    readTime: {\n      type: 'number',\n      resolve: (doc) => {\n        const wordsPerMinute = 200;\n        const noOfWords = doc.body.raw.split(/\\s/g).length;\n        const minutes = noOfWords / wordsPerMinute;\n        const readTime = Math.ceil(minutes);\n        return readTime;\n      },\n    },\n  },\n}));\n\nconst Blog = defineDocumentType(() => ({\n  name: 'Blog',\n  filePathPattern: `blogs/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    id: { type: 'number', required: true },\n    title: { type: 'string', required: true },\n    description: { type: 'string' },\n    publishedAt: { type: 'date', required: true },\n    banner: { type: 'string' },\n    featured: { type: 'boolean' },\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (doc) => `/${doc._raw.flattenedPath}`,\n    },\n    readTime: {\n      type: 'number',\n      resolve: (doc) => {\n        const wordsPerMinute = 200;\n        const noOfWords = doc.body.raw.split(/\\s/g).length;\n        const minutes = noOfWords / wordsPerMinute;\n        const readTime = Math.ceil(minutes);\n        return readTime;\n      },\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: 'src/contents',\n  documentTypes: [Project, Blog],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      rehypeSlug,\n      [\n        rehypePrettyCode,\n        {\n          theme: {\n            dark: 'one-dark-pro',\n            light: 'solarized-light',\n          },\n          onVisitLine(node: any) {\n            // Prevent lines from collapsing in `display: grid` mode, and allow empty\n            // lines to be copy/pasted\n            if (node.children.length === 0) {\n              node.children = [{ type: 'text', value: ' ' }];\n            }\n          },\n          onVisitHighlightedLine(node: any) {\n            node.properties.className.push('line--highlighted');\n          },\n          onVisitHighlightedWord(node: any) {\n            node.properties.className = ['word--highlighted'];\n          },\n        },\n      ],\n      [\n        rehypeAutolinkHeadings,\n        {\n          properties: {\n            className: ['subheading-anchor'],\n            ariaLabel: 'Link to section',\n          },\n        },\n      ],\n    ],\n  },\n});\n"],
  "mappings": "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",
  "names": []
}
